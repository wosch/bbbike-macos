#!/usr/local/bin/perl 
# -*- perl -*-

use XML::LibXML::Reader;
use IO::File;
use File::Temp;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.1;

use Data::Dumper;
use Getopt::Long;

my $debug = 1;    # 0: quiet, 1: normal, 2: verbose
my $v;
my $xmlparser;

sub usage () {
    <<EOF;
usage: $0 [--debug={0..2}] osm_file

-v                Show parser progress
--debug=0..2	  debug option
osmfile ...       Files downloaded by downloadosm,
                  or directory containing .osm files
EOF
}

GetOptions(
    "v"       => \$v,
    "debug=i" => \$debug,
) or die usage;

my @osm_files = @ARGV;
usage if !@osm_files;

sub extract_nodes {
    my $reader     = shift;
    my $fd_nodes   = shift;
    my $fd_streets = shift;

    do {
        if ( $reader->name eq 'node' ) {
            my $id  = $reader->getAttribute('id');
            my $lat = $reader->getAttribute('lat');
            my $lon = $reader->getAttribute('lon');

            print $fd_nodes $id, "\t", $lon, "\t", $lat, "\n";

        }
        elsif ( $reader->name eq 'way' ) {

            my %tag;
            my @nodes;
            my $zip_code;

            while ( $reader->nextElement == 1 ) {

                my $node_name = $reader->name;
                if ( $node_name eq 'nd' ) {
                    push @nodes, $reader->getAttribute('ref');
                }
                elsif ( $node_name eq 'tag' ) {
                    $tag{ $reader->getAttribute('k') } =
                      $reader->getAttribute('v');
                }
                else {
                    last;
                }
            }

            if ( $tag{'highway'} ) {
                my $name = $tag{'name'} || '';
                $name .= ' [ZIP ' . $tag{'postal_code'} . ']'
                  if exists $tag{'postal_code'} && $name;

                if ($name) {
                    print $fd_streets $nodes[0], "\t", $name, "\n";
                }
            }
        }

    } while ( $reader->nextElement == 1 );
}

######################################################################
#
# main
#

my $reader;
my $fh;
for my $osm_file (@osm_files) {

    if ( $osm_file =~ m{\.bz2$} ) {
        open $fh, "-|", "bzip2", "-dc", $osm_file
          or die "Can't run bunzip2 on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.gz$} ) {
        open $fh, "-|", "gzip", "-dc", $osm_file
          or die "Can't run gzip on $osm_file: $!";
    }
    elsif ( $osm_file eq '-' ) {
        $fh = \*STDIN;
    }

    binmode( $fh, ":utf8" );

    $reader = XML::LibXML::Reader->new( IO => $fh );

    #my $reader = XML::LibXML::Reader->new( location => $osm_file );

    # check if osm file
    $reader->nextElement;
    if ( $reader->name ne 'osm' ) {
        die
"The file '$osm_file' is not starting with a <osm> tag, probably not an osm file?";
    }

    my $fd_nodes = File::Temp->new( UNLINK => 0, SUFFIX => '.nodes' )
      or die "File::Temp: $!\n";
    my $fd_streets = File::Temp->new( UNLINK => 0, SUFFIX => '.streets' )
      or die "File::Temp: $!\n";
    binmode( $fd_nodes,   ":utf8" );
    binmode( $fd_streets, ":utf8" );

    extract_nodes( $reader, $fd_nodes, $fd_streets );

    print "Nodes:   ", $fd_nodes->filename,   "\n";
    print "Streets: ", $fd_streets->filename, "\n";
}

