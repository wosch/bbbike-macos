#!/usr/local/bin/perl 
# -*- perl -*-

use IO::File;
use Getopt::Long;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.1;

my $debug               = 0;
my $unique_street_names = 1;
my $sort                = 1;

sub usage () {
    <<EOF;
usage: $0 [--debug={0..2}] [--unique-street-names={0,1}] streets nodes

--debug=0..2      		debug option
--unique-street-names=0,1	print each streetname only once
--sort=0,1			sorted output
EOF
}

GetOptions(
    "unique-street-names" => \$unique_street_names,
    "debug=i"             => \$debug,
    "sort=i"              => \$sort,
) or die usage;

my $streets = $ARGV[0];
my $points  = $ARGV[1];

die &usage if !( $streets && $points );

&street_names( 'streets' => $streets, 'points' => $points, 'sort' => $sort );

sub street_names {
    my %args = @_;

    my $streets = $args{'streets'};
    my $points  = $args{'points'};
    my $sort    = $args{'sort'};

    my %hash;
    my $s = new IO::File $streets, "r" or die "open $streets: $!\n";
    while (<$s>) {
        chomp;
        my ( $point, $street ) = split(/\t/);
        push( @{ $hash{$point} }, $street );
    }

    my $p = new IO::File $points, "r" or die "open $points: $!\n";

    my $fd_sort;
    if ($sort) {
        open $fd_sort, "|-", "sort", "-uf"
          or die "Can't run sort: $!";
        select($fd_sort);
    }

    my %streets;
    while (<$p>) {
        chomp;
        my ( $point, $lon, $lat ) = split(/\t/);

        if ( exists $hash{$point} ) {
            foreach my $street ( @{ $hash{$point} } ) {
                next if $unique_street_names && exists $streets{$street};

                print $street, "\t", $lon, "\t", $lat, "\n";

                $streets{$street} = 1 if $unique_street_names;
            }
        }
    }

    if ($sort) {
        close($fd_sort);
        select STDOUT;
    }
}

